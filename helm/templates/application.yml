# ----- ConfigMap: Non-sensitive env vars -----

apiVersion: v1
kind: ConfigMap
metadata:
  name: student-api-config
  namespace: {{ .Values.namespaceOverride | default .Release.Namespace }}
data:
  PORT: "{{ .Values.api.port }}"
  DB_HOST: "{{ .Values.api.config.DB_HOST }}"
  DB_PORT: "{{ .Values.api.config.DB_PORT }}"
  DB_SSLMODE: "{{ .Values.api.config.DB_SSLMODE }}"

---

# ----- Application Deployment -----

apiVersion: apps/v1
kind: Deployment
metadata:
  name: student-api-deployment
  namespace: {{ .Values.namespaceOverride | default .Release.Namespace }}
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      app: student-api
  template:
    metadata:
      labels:
        app: student-api
    spec:
      nodeSelector:
        type: application
      initContainers:
        - name: db-migrate
          image: {{ .Values.api.image }}:{{ .Values.api.tag }}
          command: [ "./student-api", "migrate", "-c", "/app/schema.sql" ]
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: DB_PORT
            - name: DB_SSLMODE
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: DB_SSLMODE
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: student-api-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: student-api-secret
                  key: POSTGRES_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: student-api-secret
                  key: POSTGRES_DB

      containers:
        - name: student-api
          image: {{ .Values.api.image }}:{{ .Values.api.tag }}
          ports:
            - containerPort: {{ .Values.api.port }}
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: PORT
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: DB_PORT
            - name: DB_SSLMODE
              valueFrom:
                configMapKeyRef:
                  name: student-api-config
                  key: DB_SSLMODE
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: student-api-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: student-api-secret
                  key: POSTGRES_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: student-api-secret
                  key: POSTGRES_DB
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.api.port }}
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.api.port }}

---

# ----- Application Service -----

apiVersion: v1
kind: Service
metadata:
  name: student-api-service
  namespace: {{ .Values.namespaceOverride | default .Release.Namespace }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8080"
spec:
  selector:
    app: student-api
  ports:
    - port: 80
      targetPort: {{ .Values.api.port }}
      protocol: TCP
  type: ClusterIP
